import telebot
from telebot import types
import database
with open("token.txt", 'r') as token_file:
    token: str = token_file.read()

bot = telebot.TeleBot(token)
"""
basic_markup = types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=1 ,one_time_keyboard=True)
bnt_bm = types.KeyboardButton("hide me")
basic_markup.add(bnt_bm)

hide_markup = types.ReplyKeyboardRemove()

[[[]]]



"""





@bot.message_handler(commands=['start'])
def send_welcome(message):
    if database.check_user(message.chat.id):
        User = database.get_table(message)
        bot.send_message(User['chat_id'],"Error: '<11D0>'")
        bot.send_message(User['chat_id'],"You already exist. Try /menu")
    else:
        database.create_user(message)
        User = database.get_table(message)
        text = (
            "Welcome to SPUMCoin!\n"
            "Choose your language\n"
        )
        btn = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton(text='English', callback_data='start_us')
        btn2 = types.InlineKeyboardButton(text='Russian', callback_data='start_ru')
        btn.add(btn1, btn2)

        bot.send_message(User['chat_id'], text, reply_markup=btn)


@bot.callback_query_handler(func=lambda callback: callback.data)
def callback(callback):
    User = database.get_table(callback.message)
    if callback.data == 'start_us':
        text = (
            "Welcome to SPUMCoin!\n"
            "\n"
            "This bot is under development\n"
            "We apologize for the inconvenience caused\n"
            "\n"
            "Try /menu command"
        )

        database.change_information(User['chat_id'], 'language', 'US')

        bot.edit_message_text(text, User['chat_id'], callback.message.id)
    elif callback.data == 'start_ru':
        text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SPUMCoin.\n"
            "\n"
            "–î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞\n"
            "\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu"
        )

        database.change_information(User['chat_id'], 'language', 'RU')

        bot.edit_message_text(text, User['chat_id'], callback.message.id)
    elif callback.data == 'language_edit_us':
        text = (
            "Changes complete\n"
            "Now your interface language is english\n"
            "Code: '<Lcus>'"
        )

        database.change_information(User['chat_id'], 'language', 'US')
        changes_count = User['language_changes']
        database.change_information(User['chat_id'], 'language_changes', str(changes_count))

        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_back = types.InlineKeyboardButton("‚èÆ Back",callback_data='menu_help')
        markup.add(btn_back)
        bot.edit_message_text(text, User['chat_id'], callback.message.id,reply_markup=markup)
    elif callback.data == 'language_edit_ru':
        text = (
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã\n"
            "–¢–µ–ø–µ—Ä—å —è–∑—ã–∫ –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä—É—Å—Å–∫–∏–π\n"
            "Code: '<Lcru>'"
        )

        database.change_information(User['chat_id'], 'language', 'RU')
        changes_count = User['language_changes']
        database.change_information(User['chat_id'], 'language_changes', str(changes_count))

        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_back = types.InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", callback_data='menu_help')
        markup.add(btn_back)

        bot.edit_message_text(text, User['chat_id'], callback.message.id, reply_markup=markup)
    elif callback.data == 'help_back':
        menu_message(callback.message, True)
    elif callback.data == 'menu_help':
        help_message(callback.message,True)
    elif callback.data == 'menu_about_us':
        about_us(callback.message)
    elif callback.data == 'help_language_change':
        language_change(callback.message)
    elif callback.data == 'help_commands_list':
        commands_list(callback.message,True)
    elif callback.data == 'help_contact_to_support':
        contact_to_support(callback.message)


@bot.message_handler(commands=['help'])
def help_message(message, edit=False):
    User = database.get_table(message)

    text_ru = (
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
        f"–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞ Spum Coin.\n"
        f"–° –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ë–æ—Ç {database.get_bot_name(User['language'])} \n\n"
        f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –¥–∞–Ω–Ω—É—é –º–∏–Ω—É—Ç—É?"

    )

    text_us = (
        f"Welcome!\n"
        f"You have contacted the technical support of the Spum Coin bot.\n"
        f"Working with you: Bot {database.get_bot_name(User['language'])} \n\n"
        f"What interests you at this moment?"
    )

    if User['language'] == 'RU':
        text = text_ru
    elif User['language'] == 'US':
        text = text_us

    if User['language'] == 'RU':
        text_btn1 = '‚ú≥ –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'
        text_btn2 = 'üõ† –ö–æ–º–∞–Ω–¥—ã'
        text_btn3 =  'üõé –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
        text_btn_back = '‚èÆ –ù–∞–∑–∞–¥'
    elif User['language'] == 'US':
        text_btn1 = '‚ú≥ Change language'
        text_btn2 = 'üõ† Commands'
        text_btn3 = 'üõé Contact to support'
        text_btn_back = '‚èÆ Back'


    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton(text_btn1, callback_data='help_language_change')
    btn2 = types.InlineKeyboardButton(text_btn2, callback_data='help_commands_list')
    btn3 = types.InlineKeyboardButton(text_btn3, callback_data='help_contact_to_support')
    markup.add(btn1, btn2, btn3)

    if not edit:
        bot.send_message(User['chat_id'], text, reply_markup=markup)
    else:
        btn_back = types.InlineKeyboardButton(text_btn_back, callback_data='help_back')
        markup.add(btn_back)
        bot.edit_message_text(text, User['chat_id'], message.id, reply_markup=markup)





@bot.message_handler(commands=['game_text'])
def run_cmd(message):
    User = database.get_table(message)
    text = """ 12434255"""
    bot.send_message(message.chat.id,text)


@bot.message_handler(commands=['menu'])
def menu_message(message, edit=False):
    User = database.get_table(message)
    text_ru = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é SPUM Coin\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–º –±–æ—Ç–æ–º\n"
        f"\n"
        f"–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ /help\n"
        f"\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è –ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n"
    )
    text_us = (
        f"Welcome to the SPUM Coin menu\n"
        f"Thank you for using our bot\n"
        f"\n"
        f"Select the item you are interested in\n"
        f"For all questions, contact /help\n"
        f"\n"
        f"Have a nice time\n"
    )
    if User['language'] == 'RU':
        text = text_ru
        text_btn1 = "–ü—Ä–æ—Ñ–∏–ª—å"
        text_btn2 = "–ü–æ–º–æ—â—å"
        text_btn3 = "–û –Ω–∞—Å"
        text_btn4 = "–ò–≥—Ä–∞"
    elif User['language'] == 'US':
        text = text_us
        text_btn1 = "Profile"
        text_btn2 = "Help"
        text_btn3 = "About us"
        text_btn4 = "Game"

    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton(text=text_btn1,callback_data='menu_profile')
    btn2 = types.InlineKeyboardButton(text=text_btn2,callback_data='menu_help')
    btn3 = types.InlineKeyboardButton(text=text_btn3,callback_data='menu_about_us')
    btn4 = types.InlineKeyboardButton(text=text_btn4,callback_data='menu_game')
    markup.add(btn1,btn2,btn3,btn4)



    # profile
    # help
    # about (authors + version + git)
    # game
    if not edit:
        bot.send_message(User['chat_id'],text,reply_markup=markup)
    else:
        bot.edit_message_text(text,User['chat_id'],message.id, reply_markup=markup)



def language_change(message):
    User = database.get_table(message)
    text_us = (
        f"Your language: English\n"
        "Choose your language\n"
    )
    text_ru = (
        f"–í–∞—à —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫\n"
    )
    if User['language'] == 'RU':
        text = text_ru
        text_btn1 = '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'
        text_btn2 = '–†—É—Å—Å–∫–∏–π'
        text_btn_back = '‚èÆ –ù–∞–∑–∞–¥'
    elif User['language'] == 'US':
        text = text_us
        text_btn1 = 'English'
        text_btn2 = 'Russian'
        text_btn_back = '‚èÆ Back'

    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton(text_btn1, callback_data='language_edit_us')
    btn2 = types.InlineKeyboardButton(text_btn2, callback_data='language_edit_ru')
    btn_back = types.InlineKeyboardButton(text_btn_back, callback_data='menu_help')
    markup.add(btn1, btn2, btn_back)

    bot.edit_message_text(text, User['chat_id'], message.id, reply_markup=markup)


def commands_list(message,edit = False):
    User = database.get_table(message)

    text_ru = (
        f"/start -- –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
        f"/menu -- –í—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        f"/profile -- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ\n"
        f"/help -- –í—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–º–æ—â–∏\n"
    )

    text_us = (
        f"/start -- Starts the program\n"
        f"/menu -- Calls up the sharing menu\n"
        f"/profile -- Shows profile information\n"
        f"/help -- Calls up the help menu\n"
    )

    if User['language'] == 'RU':
        text = text_ru
        text_btn_back = '‚èÆ –ù–∞–∑–∞–¥'
    elif User['language'] == 'US':
        text = text_us
        text_btn_back = '‚èÆ Back'

    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_back = types.InlineKeyboardButton(text_btn_back,callback_data='menu_help')
    markup.add(btn_back)

    if not edit:
        bot.send_message(User['chat_id'], text)
    else:
        bot.edit_message_text(text, User['chat_id'], message.id, reply_markup=markup)

def contact_to_support(message):
    User = database.get_table(message)
    text_ru = (
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n"
        "Code: '<Error 000>'"
    )
    text_us = (
        "Technical support is currently unavailable\n"
        "Code: '<Error 000>'"
    )

    if User['language'] == 'RU':
        text = text_ru
        text_btn_back = '‚èÆ –ù–∞–∑–∞–¥'
    elif User['language'] == 'US':
        text = text_us
        text_btn_back = '‚èÆ Back'

    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_back = types.InlineKeyboardButton(text_btn_back,callback_data='menu_help')
    markup.add(btn_back)

    bot.edit_message_text(text, User['chat_id'], message.id, reply_markup=markup)


@bot.message_handler(commands=['about_us'])
def about_us(message):
    User = database.get_table(message)
    text_ru = (
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!\n"
        f"\n"
        f"–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫,\n"
        f"@Sn1kki -> –Ø :)))\n"
        f"\n"
        f"–¢–∞–∫ –∂–µ –æ—Ç–¥–µ–ª—å–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        f"@FedorTyulpin\n"
        f"–ò –≤—Å–µ–º, —Ç–µ–º, –∫—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.\n"
        f"\n"
        f"\n"
        f"–í–µ—Å—å –∫–æ–¥ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ GitHub\n"
    )
    text_us = (
        f"Hello!\n"
        f"\n"
        f"This project is being implemented by one person\n"
        f"@Sn1kki -> Me :)))\n"
        f"\n"
        f"Also special thanks to the user\n"
        f"@FedorTulpin\n"
        f"And everyone who participated in the creation of the project.\n"
        f"\n"
        f"\n"
        f"All code for this bot is open source and located on GitHub\n"
    )

    if User['language'] == 'RU':
        text = text_ru
        text_btn_back = '‚èÆ –ù–∞–∑–∞–¥'
    elif User['language'] == 'US':
        text = text_us
        text_btn_back = '‚èÆ Back'

    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton('üìÑ GitHub', url='https://github.com/Sn1kki/SPUMCoin')
    btn_back = types.InlineKeyboardButton(text_btn_back,callback_data='help_back')
    markup.add(btn1,btn_back)
    bot.edit_message_text(text, User['chat_id'], message.id, reply_markup=markup)




@bot.message_handler(commands=['send db'])
def send_db(message):
    pass


bot.polling(none_stop=True, interval=0)
