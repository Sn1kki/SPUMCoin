import telebot
from telebot import types
import database
with open("token.txt", 'r') as token_file:
    token: str = token_file.read()

bot = telebot.TeleBot(token)
"""
basic_markup = types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=1 ,one_time_keyboard=True)
bnt_bm = types.KeyboardButton("hide me")
basic_markup.add(bnt_bm)

hide_markup = types.ReplyKeyboardRemove()

[[[]]]



"""





@bot.message_handler(commands=['start'])
def send_welcome(message):
    if database.check_user(message.chat.id):
        User = database.get_table(message)
        bot.send_message(User['chat_id'],"Error: '<11D0>'")
        bot.send_message(User['chat_id'],"You already exist. Try /menu")
    else:
        database.create_user(message)
        User = database.get_table(message)
        text = (
            "Welcome to SPUMCoin!\n"
            "Choose your language\n"
        )
        btn = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton(text='English', callback_data='sus')
        btn2 = types.InlineKeyboardButton(text='Russian', callback_data='sru')
        btn.add(btn1, btn2)

        bot.send_message(User['chat_id'], text, reply_markup=btn)


@bot.callback_query_handler(func=lambda callback: callback.data)
def callback(callback):
    User = database.get_table(callback.message)
    if callback.data == 'sus':
        text = (
            "Welcome to SPUMCoin!\n"
            "This bot is under development\n"
            "We apologize for the inconvenience caused\n"
            "Try /help command"
        )

        database.change_information(User['chat_id'], 'language', 'US')

        bot.edit_message_text(text, User['chat_id'], callback.message.id)
    elif callback.data == 'sru':
        text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SPUMCoin.\n"
            "–î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
        )

        database.change_information(User['chat_id'], 'language', 'RU')

        bot.edit_message_text(text, User['chat_id'], callback.message.id)
    elif callback.data == 'eus':
        text = (
            "Changes complete\n"
            "Now your interface language is english\n"
            "Code: '<Lcus>'"
        )

        database.change_information(User['chat_id'], 'language', 'US')
        changes_count = User['language_changes']
        database.change_information(User['chat_id'], 'language_changes', str(changes_count))

        bot.edit_message_text(text, User['chat_id'], callback.message.id)
    elif callback.data == 'eru':
        text = (
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã\n"
            "–¢–µ–ø–µ—Ä—å —è–∑—ã–∫ –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä—É—Å—Å–∫–∏–π\n"
            "Code: '<Lcru>'"
        )

        database.change_information(User['chat_id'], 'language', 'RU')
        changes_count = User['language_changes']
        database.change_information(User['chat_id'], 'language_changes', str(changes_count))

        bot.edit_message_text(text, User['chat_id'], callback.message.id)


@bot.message_handler(commands=['help'])
def help_message(message):
    User = database.get_table(message)

    text_ru = (
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
        f"–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞ Spum Coin.\n"
        f"–° –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ë–æ—Ç {database.get_bot_name(User['language'])} \n\n"
        f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –¥–∞–Ω–Ω—É—é –º–∏–Ω—É—Ç—É?"

    )

    text_us = (
        f"Welcome!\n"
        f"You have contacted the technical support of the Spum Coin bot.\n"
        f"Working with you: Bot {database.get_bot_name(User['language'])} \n\n"
        f"What interests you at this moment?"
    )

    if User['language'] == 'RU':
        text = text_ru
    elif User['language'] == 'US':
        text = text_us

    if User['language'] == 'RU':
        text_btn1 = '‚ú≥ –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'
        text_btn2 = 'üõ† –ö–æ–º–∞–Ω–¥—ã'
        text_btn3 =  'üõé –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
    elif User['language'] == 'US':
        text_btn1 = '‚ú≥ Change language'
        text_btn2 = 'üõ† Commands'
        text_btn3 = 'üõé Contact to support'


    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton(text_btn1)
    btn2 = types.KeyboardButton(text_btn2)
    btn3 = types.KeyboardButton(text_btn3)
    markup.add(btn1, btn2, btn3)

    bot.send_message(User['chat_id'], text, reply_markup=markup)





@bot.message_handler(commands=['game_text'])
def run_cmd(message):
    User = database.get_table(message)
    text = """ 12434255"""
    bot.send_message(message.chat.id,text)


@bot.message_handler(commands=['menu'])
def menu(message, edit=False):
    User = database.get_table(message)
    text_ru = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é SPUM Coin\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–º –±–æ—Ç–æ–º\n"
        f"\n"
        f"–í –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç\n"
        f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ /help\n"
        f"\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è –ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n"
    )
    text_us = (
        f"Welcome to the SPUM Coin menu\n"
        f"Thank you for using our bot\n"
        f"\n"
        f"In this message you can select the item you are interested in\n"
        f"For all questions, contact /help\n"
        f"\n"
        f"Have a nice time\n"
    )
    if User['language'] == 'RU': text = text_ru
    elif User['language'] == 'US': text = text_us

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.InlineKeyboardButton(text="profile",callback_data='profile')
    btn1 = types.InlineKeyboardButton(text="help",callback_data='help')
    btn1 = types.InlineKeyboardButton(text="about us",callback_data='about us')
    btn1 = types.InlineKeyboardButton(text="game",callback_data='game')



    # profile
    # help
    # about (authors + version + git)
    # game
    if not edit:
        bot.send_message(User['chat_id'],text)
    elif edit:
        bot.edit_message_text(text,User['chat_id'],message.id)

@bot.message_handler(content_types=['text'])
def text_message(message):
    User = database.get_table(message)
    if message.text == "‚ú≥ –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" or message.text == "‚ú≥ Change language":
        language_change(message)
    elif message.text == "üõ† –ö–æ–º–∞–Ω–¥—ã" or message.text == "üõ† Commands":
        commands_list(message)
    elif message.text == 'üõé –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π' or message.text == 'üõé Contact to support':
        technical_support(message)

def language_change(message):
    User = database.get_table(message)
    text_us = (
        f"Your language: English\n"
        "Choose your language\n"
    )
    text_ru = (
        f"–í–∞—à —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫\n"
    )
    if User['language'] == 'RU':
        text = text_ru
    elif User['language'] == 'US':
        text = text_us

    btn = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton(text='English', callback_data='eus')
    btn2 = types.InlineKeyboardButton(text='Russian', callback_data='eru')
    btn.add(btn1, btn2)

    bot.send_message(User['chat_id'], text, reply_markup=btn)


def commands_list(message):
    User = database.get_table(message)

    text = (
        "/start -- –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
        "/help -- –í—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–º–æ—â–∏\n"
        "/run -- –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É"
    )

    bot.send_message(User['chat_id'], text)


def technical_support(message):
    chat_id = message.chat.id
    text = (
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n"
        "Code: '<Error 000>'"
    )
    bot.send_message(chat_id, text)


@bot.message_handler(commands=['send db'])
def send_db(message):
    pass


bot.polling(none_stop=True, interval=0)
